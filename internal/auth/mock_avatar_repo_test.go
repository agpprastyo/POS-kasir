// Code generated by MockGen. DO NOT EDIT.
// Source: internal/auth/avatar.go
//
// Generated by this command:
//
//	mockgen -source=internal/auth/avatar.go -destination=internal/auth/mock_avatar_repo_test.go -package=auth
//

// Package auth is a generated GoMock package.
package auth

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockIAthRepo is a mock of IAthRepo interface.
type MockIAthRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIAthRepoMockRecorder
	isgomock struct{}
}

// MockIAthRepoMockRecorder is the mock recorder for MockIAthRepo.
type MockIAthRepoMockRecorder struct {
	mock *MockIAthRepo
}

// NewMockIAthRepo creates a new mock instance.
func NewMockIAthRepo(ctrl *gomock.Controller) *MockIAthRepo {
	mock := &MockIAthRepo{ctrl: ctrl}
	mock.recorder = &MockIAthRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAthRepo) EXPECT() *MockIAthRepoMockRecorder {
	return m.recorder
}

// AvatarLink mocks base method.
func (m *MockIAthRepo) AvatarLink(ctx context.Context, userID uuid.UUID, avatar string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvatarLink", ctx, userID, avatar)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AvatarLink indicates an expected call of AvatarLink.
func (mr *MockIAthRepoMockRecorder) AvatarLink(ctx, userID, avatar any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvatarLink", reflect.TypeOf((*MockIAthRepo)(nil).AvatarLink), ctx, userID, avatar)
}

// UploadAvatar mocks base method.
func (m *MockIAthRepo) UploadAvatar(ctx context.Context, filename string, data []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAvatar", ctx, filename, data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadAvatar indicates an expected call of UploadAvatar.
func (mr *MockIAthRepoMockRecorder) UploadAvatar(ctx, filename, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAvatar", reflect.TypeOf((*MockIAthRepo)(nil).UploadAvatar), ctx, filename, data)
}
