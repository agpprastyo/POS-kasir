// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: cancelation_reasons.sql

package repository

import (
	"context"
)

const createCancellationReason = `-- name: CreateCancellationReason :one
INSERT INTO cancellation_reasons (reason, description)
VALUES ($1, $2)
RETURNING id, reason, description, is_active, created_at, updated_at
`

type CreateCancellationReasonParams struct {
	Reason      string  `json:"reason"`
	Description *string `json:"description"`
}

// Membuat alasan pembatalan baru.
func (q *Queries) CreateCancellationReason(ctx context.Context, arg CreateCancellationReasonParams) (CancellationReason, error) {
	row := q.db.QueryRow(ctx, createCancellationReason, arg.Reason, arg.Description)
	var i CancellationReason
	err := row.Scan(
		&i.ID,
		&i.Reason,
		&i.Description,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCancellationReasonByReason = `-- name: GetCancellationReasonByReason :one
SELECT id, reason, description, is_active, created_at, updated_at
FROM cancellation_reasons
WHERE reason = $1
LIMIT 1
`

// Mengambil satu alasan pembatalan berdasarkan teks alasannya untuk pengecekan duplikat.
func (q *Queries) GetCancellationReasonByReason(ctx context.Context, reason string) (CancellationReason, error) {
	row := q.db.QueryRow(ctx, getCancellationReasonByReason, reason)
	var i CancellationReason
	err := row.Scan(
		&i.ID,
		&i.Reason,
		&i.Description,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCancellationReasons = `-- name: ListCancellationReasons :many
SELECT id, reason, description, is_active, created_at, updated_at
FROM cancellation_reasons
WHERE is_active = true
ORDER BY reason
`

// Mengambil daftar semua alasan pembatalan yang aktif.
func (q *Queries) ListCancellationReasons(ctx context.Context) ([]CancellationReason, error) {
	rows, err := q.db.Query(ctx, listCancellationReasons)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CancellationReason{}
	for rows.Next() {
		var i CancellationReason
		if err := rows.Scan(
			&i.ID,
			&i.Reason,
			&i.Description,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
