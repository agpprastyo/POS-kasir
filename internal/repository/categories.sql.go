// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: categories.sql

package repository

import (
	"context"
)

const countCategories = `-- name: CountCategories :one
SELECT count(*) FROM categories
`

// Menghitung total jumlah kategori, berguna untuk pagination.
func (q *Queries) CountCategories(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countCategories)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countProductsInCategory = `-- name: CountProductsInCategory :one
SELECT count(*) FROM products WHERE category_id = $1
`

func (q *Queries) CountProductsInCategory(ctx context.Context, categoryID *int32) (int64, error) {
	row := q.db.QueryRow(ctx, countProductsInCategory, categoryID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (name)
VALUES ($1)
RETURNING id, name, created_at, updated_at
`

// Membuat kategori baru dan mengembalikan data lengkapnya.
func (q *Queries) CreateCategory(ctx context.Context, name string) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory, name)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE
FROM categories
WHERE id = $1
`

// Menghapus satu kategori berdasarkan ID.
func (q *Queries) DeleteCategory(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteCategory, id)
	return err
}

const existsCategory = `-- name: ExistsCategory :one
SELECT EXISTS (
    SELECT 1
    FROM categories
    WHERE id = $1
)
`

// Memeriksa apakah kategori dengan ID tertentu ada.
func (q *Queries) ExistsCategory(ctx context.Context, id int32) (bool, error) {
	row := q.db.QueryRow(ctx, existsCategory, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getCategory = `-- name: GetCategory :one
SELECT id, name, created_at, updated_at
FROM categories
WHERE id = $1
LIMIT 1
`

// Mengambil satu kategori berdasarkan ID.
func (q *Queries) GetCategory(ctx context.Context, id int32) (Category, error) {
	row := q.db.QueryRow(ctx, getCategory, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT id, name, created_at, updated_at
FROM categories
ORDER BY name ASC
LIMIT $1 OFFSET $2
`

type ListCategoriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

// Mengambil daftar semua kategori dengan pagination.
func (q *Queries) ListCategories(ctx context.Context, arg ListCategoriesParams) ([]Category, error) {
	rows, err := q.db.Query(ctx, listCategories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories
SET name = $2
WHERE id = $1
RETURNING id, name, created_at, updated_at
`

type UpdateCategoryParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

// Memperbarui nama kategori dan mengembalikan data yang sudah diperbarui.
func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, updateCategory, arg.ID, arg.Name)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
