// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package repository

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type UserOrder string

const (
	UserOrderUsername UserOrder = "username"
	UserOrderEmail    UserOrder = "email"
	UserOrderRole     UserOrder = "role"
	UserOrderID       UserOrder = "id"
)

func (e *UserOrder) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserOrder(s)
	case string:
		*e = UserOrder(s)
	default:
		return fmt.Errorf("unsupported scan type for UserOrder: %T", src)
	}
	return nil
}

type NullUserOrder struct {
	UserOrder UserOrder `json:"user_order"`
	Valid     bool      `json:"valid"` // Valid is true if UserOrder is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserOrder) Scan(value interface{}) error {
	if value == nil {
		ns.UserOrder, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserOrder.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserOrder) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserOrder), nil
}

type UserRole string

const (
	UserRoleAdmin   UserRole = "admin"
	UserRoleCashier UserRole = "cashier"
	UserRoleManager UserRole = "manager"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type User struct {
	ID           uuid.UUID        `json:"id"`
	Username     string           `json:"username"`
	Email        string           `json:"email"`
	PasswordHash string           `json:"password_hash"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
	Avatar       *string          `json:"avatar"`
	Role         UserRole         `json:"role"`
	IsActive     bool             `json:"is_active"`
}
