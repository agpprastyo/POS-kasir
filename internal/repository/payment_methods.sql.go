// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payment_methods.sql

package repository

import (
	"context"
)

const createPaymentMethod = `-- name: CreatePaymentMethod :one
INSERT INTO payment_methods (name)
VALUES ($1)
RETURNING id, name, is_active, created_at, updated_at
`

// Membuat metode pembayaran baru.
func (q *Queries) CreatePaymentMethod(ctx context.Context, name string) (PaymentMethod, error) {
	row := q.db.QueryRow(ctx, createPaymentMethod, name)
	var i PaymentMethod
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPaymentMethodByName = `-- name: GetPaymentMethodByName :one
SELECT id, name, is_active, created_at, updated_at
FROM payment_methods
WHERE name = $1
LIMIT 1
`

// Mengambil satu metode pembayaran berdasarkan nama untuk pengecekan duplikat.
func (q *Queries) GetPaymentMethodByName(ctx context.Context, name string) (PaymentMethod, error) {
	row := q.db.QueryRow(ctx, getPaymentMethodByName, name)
	var i PaymentMethod
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPaymentMethods = `-- name: ListPaymentMethods :many
SELECT id, name, is_active, created_at, updated_at
FROM payment_methods
WHERE is_active = true
ORDER BY name
`

// Mengambil daftar semua metode pembayaran yang aktif.
func (q *Queries) ListPaymentMethods(ctx context.Context) ([]PaymentMethod, error) {
	rows, err := q.db.Query(ctx, listPaymentMethods)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PaymentMethod{}
	for rows.Next() {
		var i PaymentMethod
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
