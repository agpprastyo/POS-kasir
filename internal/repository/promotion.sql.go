// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: promotion.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const getPromotionByID = `-- name: GetPromotionByID :one
SELECT id, name, description, scope, discount_type, discount_value, max_discount_amount, start_date, end_date, is_active, created_at, updated_at FROM promotions
WHERE id = $1 AND is_active = true AND start_date <= NOW() AND end_date >= NOW()
LIMIT 1
`

// Mengambil detail promosi berdasarkan ID.
func (q *Queries) GetPromotionByID(ctx context.Context, id uuid.UUID) (Promotion, error) {
	row := q.db.QueryRow(ctx, getPromotionByID, id)
	var i Promotion
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Scope,
		&i.DiscountType,
		&i.DiscountValue,
		&i.MaxDiscountAmount,
		&i.StartDate,
		&i.EndDate,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPromotionRules = `-- name: GetPromotionRules :many
SELECT id, promotion_id, rule_type, rule_value, description, created_at, updated_at FROM promotion_rules
WHERE promotion_id = $1
`

// Mengambil semua aturan untuk sebuah promosi.
func (q *Queries) GetPromotionRules(ctx context.Context, promotionID uuid.UUID) ([]PromotionRule, error) {
	rows, err := q.db.Query(ctx, getPromotionRules, promotionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PromotionRule{}
	for rows.Next() {
		var i PromotionRule
		if err := rows.Scan(
			&i.ID,
			&i.PromotionID,
			&i.RuleType,
			&i.RuleValue,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPromotionTargets = `-- name: GetPromotionTargets :many
SELECT id, promotion_id, target_type, target_id, created_at, updated_at FROM promotion_targets
WHERE promotion_id = $1
`

// Mengambil semua target untuk sebuah promosi.
func (q *Queries) GetPromotionTargets(ctx context.Context, promotionID uuid.UUID) ([]PromotionTarget, error) {
	rows, err := q.db.Query(ctx, getPromotionTargets, promotionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PromotionTarget{}
	for rows.Next() {
		var i PromotionTarget
		if err := rows.Scan(
			&i.ID,
			&i.PromotionID,
			&i.TargetType,
			&i.TargetID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
