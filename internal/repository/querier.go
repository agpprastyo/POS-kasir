// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package repository

import (
	"context"

	"github.com/google/uuid"
)

type Querier interface {
	// Menambahkan stok kembali ke sebuah produk (digunakan saat pesanan dibatalkan).
	AddProductStock(ctx context.Context, arg AddProductStockParams) (AddProductStockRow, error)
	// Mengubah status pesanan menjadi 'cancelled' dan mencatat alasannya.
	// Hanya bisa membatalkan pesanan yang statusnya 'open'.
	CancelOrder(ctx context.Context, arg CancelOrderParams) (Order, error)
	// Hanya memeriksa keberadaan pengguna yang aktif.
	CheckUserExistence(ctx context.Context, arg CheckUserExistenceParams) (CheckUserExistenceRow, error)
	// Hanya menghitung pengguna yang aktif dan belum dihapus.
	CountActiveUsers(ctx context.Context) (int64, error)
	// Menghitung total jumlah kategori, berguna untuk pagination.
	CountCategories(ctx context.Context) (int64, error)
	// Hanya menghitung pengguna yang tidak aktif dan belum dihapus.
	CountInactiveUsers(ctx context.Context) (int64, error)
	// Menghitung total pesanan dengan filter.
	CountOrders(ctx context.Context, arg CountOrdersParams) (int64, error)
	// Counts total products for pagination, respecting filters.
	CountProducts(ctx context.Context, arg CountProductsParams) (int64, error)
	CountProductsInCategory(ctx context.Context, categoryID *int32) (int64, error)
	// Menghitung pengguna dengan filter status.
	CountUsers(ctx context.Context, arg CountUsersParams) (int64, error)
	CreateActivityLog(ctx context.Context, arg CreateActivityLogParams) (uuid.UUID, error)
	// Membuat kategori baru dan mengembalikan data lengkapnya.
	CreateCategory(ctx context.Context, name string) (Category, error)
	// Membuat header pesanan baru dengan status 'open'.
	// Total akan dihitung dan diperbarui dalam langkah selanjutnya.
	CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error)
	// Menambahkan satu item produk ke dalam pesanan.
	CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error)
	// Menambahkan satu varian/opsi ke dalam sebuah order item.
	CreateOrderItemOption(ctx context.Context, arg CreateOrderItemOptionParams) (OrderItemOption, error)
	// Queries for Products
	// Creates a new product and returns its full details.
	// Product options should be created separately in a transaction.
	CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error)
	// Queries for Product Options (Variants)
	// Creates a new option for a specific product.
	CreateProductOption(ctx context.Context, arg CreateProductOptionParams) (ProductOption, error)
	// Tidak ada perubahan, deleted_at akan NULL secara default.
	CreateUser(ctx context.Context, arg CreateUserParams) (User, error)
	// Mengurangi stok produk.
	DecreaseProductStock(ctx context.Context, arg DecreaseProductStockParams) (Product, error)
	// Menghapus satu kategori berdasarkan ID.
	DeleteCategory(ctx context.Context, id int32) error
	// Deletes a product. Its options will be deleted automatically due to 'ON DELETE CASCADE'.
	DeleteProduct(ctx context.Context, id uuid.UUID) error
	// Mengubah DELETE menjadi UPDATE untuk soft delete.
	DeleteUser(ctx context.Context, id uuid.UUID) error
	// Memeriksa apakah kategori dengan ID tertentu ada.
	ExistsCategory(ctx context.Context, id int32) (bool, error)
	// Mengambil satu kategori berdasarkan ID.
	GetCategory(ctx context.Context, id int32) (Category, error)
	// Mengambil semua varian untuk beberapa produk.
	GetOptionsForProducts(ctx context.Context, dollar_1 []uuid.UUID) ([]ProductOption, error)
	// Mengambil pesanan berdasarkan referensi dari payment gateway.
	GetOrderByGatewayRef(ctx context.Context, paymentGatewayReference *string) (Order, error)
	// Mengambil satu pesanan dan mengunci barisnya untuk pembaruan (mencegah race condition).
	// Penting untuk digunakan di dalam transaksi sebelum mengupdate total.
	GetOrderForUpdate(ctx context.Context, id uuid.UUID) (Order, error)
	// Mengambil detail lengkap pesanan, termasuk item dan opsinya dalam format JSON.
	GetOrderWithDetails(ctx context.Context, id uuid.UUID) (GetOrderWithDetailsRow, error)
	// Mengambil satu varian produk berdasarkan ID dan ID produk induknya.
	GetProductOption(ctx context.Context, arg GetProductOptionParams) (ProductOption, error)
	// Retrieves a single product and aggregates its options into a JSON array.
	// This is an efficient way to fetch a product and its variants in one query.
	// Now filters out soft-deleted options.
	GetProductWithOptions(ctx context.Context, id uuid.UUID) (GetProductWithOptionsRow, error)
	// Mengambil beberapa produk berdasarkan array ID. Ini untuk menghindari N+1 query.
	GetProductsByIDs(ctx context.Context, dollar_1 []uuid.UUID) ([]Product, error)
	// Mengambil satu pengguna berdasarkan email, hanya jika pengguna tersebut aktif.
	GetUserByEmail(ctx context.Context, email string) (User, error)
	// Mengambil satu pengguna berdasarkan ID, hanya jika pengguna tersebut aktif.
	GetUserByID(ctx context.Context, id uuid.UUID) (User, error)
	// Mengambil satu pengguna berdasarkan username, hanya jika pengguna tersebut aktif.
	GetUserByUsername(ctx context.Context, username string) (User, error)
	// Mengambil daftar semua kategori dengan pagination.
	ListCategories(ctx context.Context, arg ListCategoriesParams) ([]Category, error)
	// Retrieves all options for a single product.
	ListOptionsForProduct(ctx context.Context, productID uuid.UUID) ([]ProductOption, error)
	// Mengambil daftar pesanan dengan filter dan pagination.
	ListOrders(ctx context.Context, arg ListOrdersParams) ([]Order, error)
	// Lists products with filtering and pagination.
	// Does not include variants for performance reasons on a list view.
	ListProducts(ctx context.Context, arg ListProductsParams) ([]ListProductsRow, error)
	// Mengambil daftar pengguna dengan filter, pagination, dan status (aktif/dihapus/semua).
	ListUsers(ctx context.Context, arg ListUsersParams) ([]ListUsersRow, error)
	SoftDeleteProduct(ctx context.Context, id uuid.UUID) error
	// Deletes a single product option.
	SoftDeleteProductOption(ctx context.Context, id uuid.UUID) error
	// Hanya bisa mengubah status pengguna yang belum dihapus.
	ToggleUserActiveStatus(ctx context.Context, id uuid.UUID) (uuid.UUID, error)
	// Memperbarui nama kategori dan mengembalikan data yang sudah diperbarui.
	UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error)
	// Menyimpan referensi pembayaran dari payment gateway dan metode pembayaran.
	UpdateOrderPaymentInfo(ctx context.Context, arg UpdateOrderPaymentInfoParams) error
	// Memperbarui status pesanan berdasarkan referensi dari payment gateway (digunakan oleh webhook).
	UpdateOrderStatusByGatewayRef(ctx context.Context, arg UpdateOrderStatusByGatewayRefParams) (Order, error)
	// Memperbarui total harga, diskon, dan total bersih dari sebuah pesanan.
	UpdateOrderTotals(ctx context.Context, arg UpdateOrderTotalsParams) (Order, error)
	// Updates a product's details. Use COALESCE for optional fields.
	UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error)
	// Updates a specific product option.
	UpdateProductOption(ctx context.Context, arg UpdateProductOptionParams) (ProductOption, error)
	// Memperbarui pengguna aktif.
	UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error)
	// Hanya bisa mengubah password pengguna aktif.
	UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error
	// Mengubah :exec menjadi :one dan menambahkan RETURNING untuk konfirmasi.
	// Hanya bisa mengubah peran pengguna aktif.
	UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) (User, error)
}

var _ Querier = (*Queries)(nil)
