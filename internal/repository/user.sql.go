// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  id,
  username,
  email,
  password_hash,
  avatar,
  role
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, username, email, password_hash, created_at, updated_at, avatar, role, is_active
`

type CreateUserParams struct {
	ID           uuid.UUID `json:"id"`
	Username     string    `json:"username"`
	Email        string    `json:"email"`
	PasswordHash string    `json:"password_hash"`
	Avatar       *string   `json:"avatar"`
	Role         UserRole  `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.Avatar,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Avatar,
		&i.Role,
		&i.IsActive,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password_hash, avatar, role, is_active
FROM users
WHERE email = $1
`

type GetUserByEmailRow struct {
	ID           uuid.UUID `json:"id"`
	Username     string    `json:"username"`
	Email        string    `json:"email"`
	PasswordHash string    `json:"password_hash"`
	Avatar       *string   `json:"avatar"`
	Role         UserRole  `json:"role"`
	IsActive     bool      `json:"is_active"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Avatar,
		&i.Role,
		&i.IsActive,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, password_hash, avatar, role, is_active
FROM users
WHERE id = $1
`

type GetUserByIDRow struct {
	ID           uuid.UUID `json:"id"`
	Username     string    `json:"username"`
	Email        string    `json:"email"`
	PasswordHash string    `json:"password_hash"`
	Avatar       *string   `json:"avatar"`
	Role         UserRole  `json:"role"`
	IsActive     bool      `json:"is_active"`
}

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Avatar,
		&i.Role,
		&i.IsActive,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, password_hash, avatar, role, is_active
FROM users
WHERE username = $1
`

type GetUserByUsernameRow struct {
	ID           uuid.UUID `json:"id"`
	Username     string    `json:"username"`
	Email        string    `json:"email"`
	PasswordHash string    `json:"password_hash"`
	Avatar       *string   `json:"avatar"`
	Role         UserRole  `json:"role"`
	IsActive     bool      `json:"is_active"`
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Avatar,
		&i.Role,
		&i.IsActive,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, email, password_hash, avatar, role, is_active
FROM users
WHERE
  ($3::text  IS NULL OR username ILIKE '%' || $3 || '%' OR email ILIKE '%' || $3  || '%')
  AND ($4::text IS NULL OR role = $4)
ORDER BY
    CASE WHEN $5::user_order = 'username' AND $6::bool = true THEN username END ASC,
    CASE WHEN $5::user_order = 'email' AND $6::bool = true THEN email END ASC,
    CASE WHEN $5::user_order = 'role' AND $6::bool = true THEN role END ASC,
    CASE WHEN $5::user_order = 'id' AND $6::bool = true THEN id END ASC,

    CASE WHEN $5::user_order = 'username' AND $6::bool = false THEN username END DESC,
    CASE WHEN $5::user_order = 'email' AND $6::bool = false THEN email END DESC,
    CASE WHEN $5::user_order = 'role' AND $6::bool = false THEN role END DESC,
    CASE WHEN $5::user_order = 'id' AND $6::bool = false THEN id END DESC

LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit      int32     `json:"limit"`
	Offset     int32     `json:"offset"`
	SearchText string    `json:"search_text"`
	Role       string    `json:"role"`
	OrderBy    UserOrder `json:"order_by"`
	Ascending  bool      `json:"ascending"`
}

type ListUsersRow struct {
	ID           uuid.UUID `json:"id"`
	Username     string    `json:"username"`
	Email        string    `json:"email"`
	PasswordHash string    `json:"password_hash"`
	Avatar       *string   `json:"avatar"`
	Role         UserRole  `json:"role"`
	IsActive     bool      `json:"is_active"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]ListUsersRow, error) {
	rows, err := q.db.Query(ctx, listUsers,
		arg.Limit,
		arg.Offset,
		arg.SearchText,
		arg.Role,
		arg.OrderBy,
		arg.Ascending,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUsersRow{}
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.PasswordHash,
			&i.Avatar,
			&i.Role,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const toggleStatus = `-- name: ToggleStatus :exec
UPDATE users
SET is_active = NOT is_active
WHERE id = $1
`

func (q *Queries) ToggleStatus(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, toggleStatus, id)
	return err
}

const updateAvatar = `-- name: UpdateAvatar :exec
UPDATE users
SET avatar = $2
WHERE id = $1
`

type UpdateAvatarParams struct {
	ID     uuid.UUID `json:"id"`
	Avatar *string   `json:"avatar"`
}

func (q *Queries) UpdateAvatar(ctx context.Context, arg UpdateAvatarParams) error {
	_, err := q.db.Exec(ctx, updateAvatar, arg.ID, arg.Avatar)
	return err
}

const updatePasswordHash = `-- name: UpdatePasswordHash :exec
UPDATE users
SET password_hash = $2
WHERE id = $1
`

type UpdatePasswordHashParams struct {
	ID           uuid.UUID `json:"id"`
	PasswordHash string    `json:"password_hash"`
}

func (q *Queries) UpdatePasswordHash(ctx context.Context, arg UpdatePasswordHashParams) error {
	_, err := q.db.Exec(ctx, updatePasswordHash, arg.ID, arg.PasswordHash)
	return err
}

const updateUsernameAndEmail = `-- name: UpdateUsernameAndEmail :exec
UPDATE users
SET username = $2,
    email = $3
WHERE id = $1
`

type UpdateUsernameAndEmailParams struct {
	ID       uuid.UUID `json:"id"`
	Username string    `json:"username"`
	Email    string    `json:"email"`
}

func (q *Queries) UpdateUsernameAndEmail(ctx context.Context, arg UpdateUsernameAndEmailParams) error {
	_, err := q.db.Exec(ctx, updateUsernameAndEmail, arg.ID, arg.Username, arg.Email)
	return err
}
