// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const checkUserExistence = `-- name: CheckUserExistence :one
SELECT
    EXISTS(SELECT 1 FROM users u WHERE u.email = $1 AND u.deleted_at IS NULL) AS email_exists,
    EXISTS(SELECT 1 FROM users u WHERE u.username = $2 AND u.deleted_at IS NULL) AS username_exists
`

type CheckUserExistenceParams struct {
	Email    string `json:"email"`
	Username string `json:"username"`
}

type CheckUserExistenceRow struct {
	EmailExists    bool `json:"email_exists"`
	UsernameExists bool `json:"username_exists"`
}

// Hanya memeriksa keberadaan pengguna yang aktif.
func (q *Queries) CheckUserExistence(ctx context.Context, arg CheckUserExistenceParams) (CheckUserExistenceRow, error) {
	row := q.db.QueryRow(ctx, checkUserExistence, arg.Email, arg.Username)
	var i CheckUserExistenceRow
	err := row.Scan(&i.EmailExists, &i.UsernameExists)
	return i, err
}

const countActiveUsers = `-- name: CountActiveUsers :one
SELECT COUNT(*) FROM users WHERE is_active = true AND deleted_at IS NULL
`

// Hanya menghitung pengguna yang aktif dan belum dihapus.
func (q *Queries) CountActiveUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countActiveUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countInactiveUsers = `-- name: CountInactiveUsers :one
SELECT COUNT(*) FROM users WHERE is_active = false AND deleted_at IS NULL
`

// Hanya menghitung pengguna yang tidak aktif dan belum dihapus.
func (q *Queries) CountInactiveUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countInactiveUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUsers = `-- name: CountUsers :one
SELECT count(*) FROM users
WHERE
    (
        ($1::text IS NULL OR username ILIKE '%' || $1 || '%')
            OR
        ($1::text IS NULL OR email ILIKE '%' || $1 || '%')
        )
  AND ($2::user_role IS NULL OR role = $2)
  AND ($3::bool IS NULL OR is_active = $3)
  AND (
    CASE
        WHEN $4::text = 'deleted' THEN deleted_at IS NOT NULL
        WHEN $4::text = 'all' THEN TRUE
        ELSE deleted_at IS NULL
        END
    )
`

type CountUsersParams struct {
	SearchText *string      `json:"search_text"`
	Role       NullUserRole `json:"role"`
	IsActive   *bool        `json:"is_active"`
	Status     *string      `json:"status"`
}

// Menghitung pengguna dengan filter status.
func (q *Queries) CountUsers(ctx context.Context, arg CountUsersParams) (int64, error) {
	row := q.db.QueryRow(ctx, countUsers,
		arg.SearchText,
		arg.Role,
		arg.IsActive,
		arg.Status,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id,username, email, password_hash, avatar, role, is_active)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, username, email, password_hash, created_at, updated_at, avatar, role, is_active, deleted_at
`

type CreateUserParams struct {
	ID           uuid.UUID `json:"id"`
	Username     string    `json:"username"`
	Email        string    `json:"email"`
	PasswordHash string    `json:"password_hash"`
	Avatar       *string   `json:"avatar"`
	Role         UserRole  `json:"role"`
	IsActive     bool      `json:"is_active"`
}

// Tidak ada perubahan, deleted_at akan NULL secara default.
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.Avatar,
		arg.Role,
		arg.IsActive,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Avatar,
		&i.Role,
		&i.IsActive,
		&i.DeletedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users
SET deleted_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
`

// Mengubah DELETE menjadi UPDATE untuk soft delete.
func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password_hash, created_at, updated_at, avatar, role, is_active, deleted_at
FROM users
WHERE email = $1 AND deleted_at IS NULL
LIMIT 1
`

// Mengambil satu pengguna berdasarkan email, hanya jika pengguna tersebut aktif.
func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Avatar,
		&i.Role,
		&i.IsActive,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, password_hash, created_at, updated_at, avatar, role, is_active, deleted_at
FROM users
WHERE id = $1 AND deleted_at IS NULL
LIMIT 1
`

// Mengambil satu pengguna berdasarkan ID, hanya jika pengguna tersebut aktif.
func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Avatar,
		&i.Role,
		&i.IsActive,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, password_hash, created_at, updated_at, avatar, role, is_active, deleted_at
FROM users
WHERE username = $1 AND deleted_at IS NULL
LIMIT 1
`

// Mengambil satu pengguna berdasarkan username, hanya jika pengguna tersebut aktif.
func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Avatar,
		&i.Role,
		&i.IsActive,
		&i.DeletedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, email, avatar, role, is_active, created_at, updated_at, deleted_at
FROM users
WHERE
    (
        ($3::text IS NULL OR username ILIKE '%' || $3 || '%')
            OR
        ($3::text IS NULL OR email ILIKE '%' || $3 || '%')
        )
  AND ($4::user_role IS NULL OR role = $4)
  AND ($5::bool IS NULL OR is_active = $5)
  AND (
    CASE
        WHEN $6::text = 'deleted' THEN deleted_at IS NOT NULL
        WHEN $6::text = 'all' THEN TRUE
        ELSE deleted_at IS NULL
        END
    )
ORDER BY
    CASE WHEN $7::user_order_column = 'username' AND $8::sort_order = 'asc'  THEN username END ASC,
    CASE WHEN $7::user_order_column = 'username' AND $8::sort_order = 'desc' THEN username END DESC,
    CASE WHEN $7::user_order_column = 'email' AND $8::sort_order = 'asc' THEN email END ASC,
    CASE WHEN $7::user_order_column = 'email' AND $8::sort_order = 'desc' THEN email END DESC,
    CASE WHEN $7::user_order_column = 'created_at' AND $8::sort_order = 'asc' THEN created_at END ASC,
    CASE WHEN $7::user_order_column = 'created_at' AND $8::sort_order = 'desc' THEN created_at END DESC,
    created_at ASC
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit      int32           `json:"limit"`
	Offset     int32           `json:"offset"`
	SearchText *string         `json:"search_text"`
	Role       NullUserRole    `json:"role"`
	IsActive   *bool           `json:"is_active"`
	Status     *string         `json:"status"`
	OrderBy    UserOrderColumn `json:"order_by"`
	SortOrder  SortOrder       `json:"sort_order"`
}

type ListUsersRow struct {
	ID        uuid.UUID          `json:"id"`
	Username  string             `json:"username"`
	Email     string             `json:"email"`
	Avatar    *string            `json:"avatar"`
	Role      UserRole           `json:"role"`
	IsActive  bool               `json:"is_active"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
}

// Mengambil daftar pengguna dengan filter, pagination, dan status (aktif/dihapus/semua).
func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]ListUsersRow, error) {
	rows, err := q.db.Query(ctx, listUsers,
		arg.Limit,
		arg.Offset,
		arg.SearchText,
		arg.Role,
		arg.IsActive,
		arg.Status,
		arg.OrderBy,
		arg.SortOrder,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUsersRow{}
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Avatar,
			&i.Role,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const toggleUserActiveStatus = `-- name: ToggleUserActiveStatus :one
UPDATE users
SET is_active = NOT is_active
WHERE id = $1 AND deleted_at IS NULL
RETURNING id
`

// Hanya bisa mengubah status pengguna yang belum dihapus.
func (q *Queries) ToggleUserActiveStatus(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, toggleUserActiveStatus, id)
	err := row.Scan(&id)
	return id, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    username = COALESCE($2, username),
    email = COALESCE($3, email),
    avatar = COALESCE($4, avatar),
    is_active = COALESCE($5, is_active)
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, username, email, password_hash, created_at, updated_at, avatar, role, is_active, deleted_at
`

type UpdateUserParams struct {
	ID       uuid.UUID `json:"id"`
	Username *string   `json:"username"`
	Email    *string   `json:"email"`
	Avatar   *string   `json:"avatar"`
	IsActive *bool     `json:"is_active"`
}

// Memperbarui pengguna aktif.
func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.Avatar,
		arg.IsActive,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Avatar,
		&i.Role,
		&i.IsActive,
		&i.DeletedAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET password_hash = $2
WHERE id = $1 AND deleted_at IS NULL
`

type UpdateUserPasswordParams struct {
	ID           uuid.UUID `json:"id"`
	PasswordHash string    `json:"password_hash"`
}

// Hanya bisa mengubah password pengguna aktif.
func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.PasswordHash)
	return err
}

const updateUserRole = `-- name: UpdateUserRole :one
UPDATE users
SET role = $2
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, username, email, password_hash, created_at, updated_at, avatar, role, is_active, deleted_at
`

type UpdateUserRoleParams struct {
	ID   uuid.UUID `json:"id"`
	Role UserRole  `json:"role"`
}

// Mengubah :exec menjadi :one dan menambahkan RETURNING untuk konfirmasi.
// Hanya bisa mengubah peran pengguna aktif.
func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserRole, arg.ID, arg.Role)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Avatar,
		&i.Role,
		&i.IsActive,
		&i.DeletedAt,
	)
	return i, err
}
