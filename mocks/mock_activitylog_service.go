// Code generated by MockGen. DO NOT EDIT.
// Source: POS-kasir/internal/activitylog (interfaces: IActivityService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_activitylog_service.go -package=mocks POS-kasir/internal/activitylog IActivityService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	repository "POS-kasir/internal/repository"
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockIActivityService is a mock of IActivityService interface.
type MockIActivityService struct {
	ctrl     *gomock.Controller
	recorder *MockIActivityServiceMockRecorder
	isgomock struct{}
}

// MockIActivityServiceMockRecorder is the mock recorder for MockIActivityService.
type MockIActivityServiceMockRecorder struct {
	mock *MockIActivityService
}

// NewMockIActivityService creates a new mock instance.
func NewMockIActivityService(ctrl *gomock.Controller) *MockIActivityService {
	mock := &MockIActivityService{ctrl: ctrl}
	mock.recorder = &MockIActivityServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIActivityService) EXPECT() *MockIActivityServiceMockRecorder {
	return m.recorder
}

// Log mocks base method.
func (m *MockIActivityService) Log(ctx context.Context, userID uuid.UUID, action repository.LogActionType, entityType repository.LogEntityType, entityID string, details map[string]any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Log", ctx, userID, action, entityType, entityID, details)
}

// Log indicates an expected call of Log.
func (mr *MockIActivityServiceMockRecorder) Log(ctx, userID, action, entityType, entityID, details any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockIActivityService)(nil).Log), ctx, userID, action, entityType, entityID, details)
}
