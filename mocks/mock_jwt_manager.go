// Code generated by MockGen. DO NOT EDIT.
// Source: POS-kasir/pkg/utils (interfaces: Manager)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_jwt_manager.go -package=mocks POS-kasir/pkg/utils Manager
//

// Package mocks is a generated GoMock package.
package mocks

import (
	repository "POS-kasir/internal/repository"
	utils "POS-kasir/pkg/utils"
	reflect "reflect"
	time "time"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
	isgomock struct{}
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockManager) GenerateToken(username, email string, userID uuid.UUID, role repository.UserRole) (string, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", username, email, userID, role)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockManagerMockRecorder) GenerateToken(username, email, userID, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockManager)(nil).GenerateToken), username, email, userID, role)
}

// VerifyToken mocks base method.
func (m *MockManager) VerifyToken(tokenStr string) (utils.JWTClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", tokenStr)
	ret0, _ := ret[0].(utils.JWTClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockManagerMockRecorder) VerifyToken(tokenStr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockManager)(nil).VerifyToken), tokenStr)
}
