// Code generated by MockGen. DO NOT EDIT.
// Source: POS-kasir/pkg/minio (interfaces: IMinio)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_minio.go -package=mocks POS-kasir/pkg/minio IMinio
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIMinio is a mock of IMinio interface.
type MockIMinio struct {
	ctrl     *gomock.Controller
	recorder *MockIMinioMockRecorder
	isgomock struct{}
}

// MockIMinioMockRecorder is the mock recorder for MockIMinio.
type MockIMinioMockRecorder struct {
	mock *MockIMinio
}

// NewMockIMinio creates a new mock instance.
func NewMockIMinio(ctrl *gomock.Controller) *MockIMinio {
	mock := &MockIMinio{ctrl: ctrl}
	mock.recorder = &MockIMinioMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMinio) EXPECT() *MockIMinioMockRecorder {
	return m.recorder
}

// BucketExists mocks base method.
func (m *MockIMinio) BucketExists(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BucketExists", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BucketExists indicates an expected call of BucketExists.
func (mr *MockIMinioMockRecorder) BucketExists(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BucketExists", reflect.TypeOf((*MockIMinio)(nil).BucketExists), ctx)
}

// GetFileShareLink mocks base method.
func (m *MockIMinio) GetFileShareLink(ctx context.Context, objectName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileShareLink", ctx, objectName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileShareLink indicates an expected call of GetFileShareLink.
func (mr *MockIMinioMockRecorder) GetFileShareLink(ctx, objectName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileShareLink", reflect.TypeOf((*MockIMinio)(nil).GetFileShareLink), ctx, objectName)
}

// UploadFile mocks base method.
func (m *MockIMinio) UploadFile(ctx context.Context, objectName string, data []byte, contentType string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, objectName, data, contentType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockIMinioMockRecorder) UploadFile(ctx, objectName, data, contentType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockIMinio)(nil).UploadFile), ctx, objectName, data, contentType)
}
