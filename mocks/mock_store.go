// Code generated by MockGen. DO NOT EDIT.
// Source: POS-kasir/internal/repository (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_store.go -package=mocks POS-kasir/internal/repository Store
//

// Package mocks is a generated GoMock package.
package mocks

import (
	repository "POS-kasir/internal/repository"
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddProductStock mocks base method.
func (m *MockStore) AddProductStock(ctx context.Context, arg repository.AddProductStockParams) (repository.AddProductStockRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProductStock", ctx, arg)
	ret0, _ := ret[0].(repository.AddProductStockRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProductStock indicates an expected call of AddProductStock.
func (mr *MockStoreMockRecorder) AddProductStock(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProductStock", reflect.TypeOf((*MockStore)(nil).AddProductStock), ctx, arg)
}

// CancelOrder mocks base method.
func (m *MockStore) CancelOrder(ctx context.Context, arg repository.CancelOrderParams) (repository.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrder", ctx, arg)
	ret0, _ := ret[0].(repository.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelOrder indicates an expected call of CancelOrder.
func (mr *MockStoreMockRecorder) CancelOrder(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockStore)(nil).CancelOrder), ctx, arg)
}

// CheckUserExistence mocks base method.
func (m *MockStore) CheckUserExistence(ctx context.Context, arg repository.CheckUserExistenceParams) (repository.CheckUserExistenceRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserExistence", ctx, arg)
	ret0, _ := ret[0].(repository.CheckUserExistenceRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserExistence indicates an expected call of CheckUserExistence.
func (mr *MockStoreMockRecorder) CheckUserExistence(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserExistence", reflect.TypeOf((*MockStore)(nil).CheckUserExistence), ctx, arg)
}

// CountActiveUsers mocks base method.
func (m *MockStore) CountActiveUsers(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountActiveUsers", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountActiveUsers indicates an expected call of CountActiveUsers.
func (mr *MockStoreMockRecorder) CountActiveUsers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountActiveUsers", reflect.TypeOf((*MockStore)(nil).CountActiveUsers), ctx)
}

// CountCategories mocks base method.
func (m *MockStore) CountCategories(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountCategories", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountCategories indicates an expected call of CountCategories.
func (mr *MockStoreMockRecorder) CountCategories(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountCategories", reflect.TypeOf((*MockStore)(nil).CountCategories), ctx)
}

// CountInactiveUsers mocks base method.
func (m *MockStore) CountInactiveUsers(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountInactiveUsers", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountInactiveUsers indicates an expected call of CountInactiveUsers.
func (mr *MockStoreMockRecorder) CountInactiveUsers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountInactiveUsers", reflect.TypeOf((*MockStore)(nil).CountInactiveUsers), ctx)
}

// CountOrders mocks base method.
func (m *MockStore) CountOrders(ctx context.Context, arg repository.CountOrdersParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountOrders", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountOrders indicates an expected call of CountOrders.
func (mr *MockStoreMockRecorder) CountOrders(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountOrders", reflect.TypeOf((*MockStore)(nil).CountOrders), ctx, arg)
}

// CountProducts mocks base method.
func (m *MockStore) CountProducts(ctx context.Context, arg repository.CountProductsParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountProducts", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountProducts indicates an expected call of CountProducts.
func (mr *MockStoreMockRecorder) CountProducts(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountProducts", reflect.TypeOf((*MockStore)(nil).CountProducts), ctx, arg)
}

// CountProductsInCategory mocks base method.
func (m *MockStore) CountProductsInCategory(ctx context.Context, categoryID *int32) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountProductsInCategory", ctx, categoryID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountProductsInCategory indicates an expected call of CountProductsInCategory.
func (mr *MockStoreMockRecorder) CountProductsInCategory(ctx, categoryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountProductsInCategory", reflect.TypeOf((*MockStore)(nil).CountProductsInCategory), ctx, categoryID)
}

// CountUsers mocks base method.
func (m *MockStore) CountUsers(ctx context.Context, arg repository.CountUsersParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUsers", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUsers indicates an expected call of CountUsers.
func (mr *MockStoreMockRecorder) CountUsers(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUsers", reflect.TypeOf((*MockStore)(nil).CountUsers), ctx, arg)
}

// CreateActivityLog mocks base method.
func (m *MockStore) CreateActivityLog(ctx context.Context, arg repository.CreateActivityLogParams) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActivityLog", ctx, arg)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActivityLog indicates an expected call of CreateActivityLog.
func (mr *MockStoreMockRecorder) CreateActivityLog(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActivityLog", reflect.TypeOf((*MockStore)(nil).CreateActivityLog), ctx, arg)
}

// CreateCancellationReason mocks base method.
func (m *MockStore) CreateCancellationReason(ctx context.Context, arg repository.CreateCancellationReasonParams) (repository.CancellationReason, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCancellationReason", ctx, arg)
	ret0, _ := ret[0].(repository.CancellationReason)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCancellationReason indicates an expected call of CreateCancellationReason.
func (mr *MockStoreMockRecorder) CreateCancellationReason(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCancellationReason", reflect.TypeOf((*MockStore)(nil).CreateCancellationReason), ctx, arg)
}

// CreateCategory mocks base method.
func (m *MockStore) CreateCategory(ctx context.Context, name string) (repository.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", ctx, name)
	ret0, _ := ret[0].(repository.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockStoreMockRecorder) CreateCategory(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockStore)(nil).CreateCategory), ctx, name)
}

// CreateOrder mocks base method.
func (m *MockStore) CreateOrder(ctx context.Context, arg repository.CreateOrderParams) (repository.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, arg)
	ret0, _ := ret[0].(repository.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockStoreMockRecorder) CreateOrder(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockStore)(nil).CreateOrder), ctx, arg)
}

// CreateOrderItem mocks base method.
func (m *MockStore) CreateOrderItem(ctx context.Context, arg repository.CreateOrderItemParams) (repository.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderItem", ctx, arg)
	ret0, _ := ret[0].(repository.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderItem indicates an expected call of CreateOrderItem.
func (mr *MockStoreMockRecorder) CreateOrderItem(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderItem", reflect.TypeOf((*MockStore)(nil).CreateOrderItem), ctx, arg)
}

// CreateOrderItemOption mocks base method.
func (m *MockStore) CreateOrderItemOption(ctx context.Context, arg repository.CreateOrderItemOptionParams) (repository.OrderItemOption, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderItemOption", ctx, arg)
	ret0, _ := ret[0].(repository.OrderItemOption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderItemOption indicates an expected call of CreateOrderItemOption.
func (mr *MockStoreMockRecorder) CreateOrderItemOption(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderItemOption", reflect.TypeOf((*MockStore)(nil).CreateOrderItemOption), ctx, arg)
}

// CreatePaymentMethod mocks base method.
func (m *MockStore) CreatePaymentMethod(ctx context.Context, name string) (repository.PaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaymentMethod", ctx, name)
	ret0, _ := ret[0].(repository.PaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePaymentMethod indicates an expected call of CreatePaymentMethod.
func (mr *MockStoreMockRecorder) CreatePaymentMethod(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaymentMethod", reflect.TypeOf((*MockStore)(nil).CreatePaymentMethod), ctx, name)
}

// CreateProduct mocks base method.
func (m *MockStore) CreateProduct(ctx context.Context, arg repository.CreateProductParams) (repository.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, arg)
	ret0, _ := ret[0].(repository.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockStoreMockRecorder) CreateProduct(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockStore)(nil).CreateProduct), ctx, arg)
}

// CreateProductOption mocks base method.
func (m *MockStore) CreateProductOption(ctx context.Context, arg repository.CreateProductOptionParams) (repository.ProductOption, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductOption", ctx, arg)
	ret0, _ := ret[0].(repository.ProductOption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProductOption indicates an expected call of CreateProductOption.
func (mr *MockStoreMockRecorder) CreateProductOption(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductOption", reflect.TypeOf((*MockStore)(nil).CreateProductOption), ctx, arg)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(ctx context.Context, arg repository.CreateUserParams) (repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), ctx, arg)
}

// DecreaseProductStock mocks base method.
func (m *MockStore) DecreaseProductStock(ctx context.Context, arg repository.DecreaseProductStockParams) (repository.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecreaseProductStock", ctx, arg)
	ret0, _ := ret[0].(repository.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecreaseProductStock indicates an expected call of DecreaseProductStock.
func (mr *MockStoreMockRecorder) DecreaseProductStock(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecreaseProductStock", reflect.TypeOf((*MockStore)(nil).DecreaseProductStock), ctx, arg)
}

// DeleteCategory mocks base method.
func (m *MockStore) DeleteCategory(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockStoreMockRecorder) DeleteCategory(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockStore)(nil).DeleteCategory), ctx, id)
}

// DeleteOrderItem mocks base method.
func (m *MockStore) DeleteOrderItem(ctx context.Context, arg repository.DeleteOrderItemParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderItem", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrderItem indicates an expected call of DeleteOrderItem.
func (mr *MockStoreMockRecorder) DeleteOrderItem(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderItem", reflect.TypeOf((*MockStore)(nil).DeleteOrderItem), ctx, arg)
}

// DeleteOrderItemOptionsByOrderItemID mocks base method.
func (m *MockStore) DeleteOrderItemOptionsByOrderItemID(ctx context.Context, orderItemID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderItemOptionsByOrderItemID", ctx, orderItemID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrderItemOptionsByOrderItemID indicates an expected call of DeleteOrderItemOptionsByOrderItemID.
func (mr *MockStoreMockRecorder) DeleteOrderItemOptionsByOrderItemID(ctx, orderItemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderItemOptionsByOrderItemID", reflect.TypeOf((*MockStore)(nil).DeleteOrderItemOptionsByOrderItemID), ctx, orderItemID)
}

// DeleteOrderItemsByOrderID mocks base method.
func (m *MockStore) DeleteOrderItemsByOrderID(ctx context.Context, orderID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderItemsByOrderID", ctx, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrderItemsByOrderID indicates an expected call of DeleteOrderItemsByOrderID.
func (mr *MockStoreMockRecorder) DeleteOrderItemsByOrderID(ctx, orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderItemsByOrderID", reflect.TypeOf((*MockStore)(nil).DeleteOrderItemsByOrderID), ctx, orderID)
}

// DeleteProduct mocks base method.
func (m *MockStore) DeleteProduct(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockStoreMockRecorder) DeleteProduct(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockStore)(nil).DeleteProduct), ctx, id)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), ctx, id)
}

// ExecTx mocks base method.
func (m *MockStore) ExecTx(ctx context.Context, fn func(*repository.Queries) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecTx", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecTx indicates an expected call of ExecTx.
func (mr *MockStoreMockRecorder) ExecTx(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecTx", reflect.TypeOf((*MockStore)(nil).ExecTx), ctx, fn)
}

// ExistsCategory mocks base method.
func (m *MockStore) ExistsCategory(ctx context.Context, id int32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsCategory", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsCategory indicates an expected call of ExistsCategory.
func (mr *MockStoreMockRecorder) ExistsCategory(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsCategory", reflect.TypeOf((*MockStore)(nil).ExistsCategory), ctx, id)
}

// GetCancellationReasonByReason mocks base method.
func (m *MockStore) GetCancellationReasonByReason(ctx context.Context, reason string) (repository.CancellationReason, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCancellationReasonByReason", ctx, reason)
	ret0, _ := ret[0].(repository.CancellationReason)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCancellationReasonByReason indicates an expected call of GetCancellationReasonByReason.
func (mr *MockStoreMockRecorder) GetCancellationReasonByReason(ctx, reason any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCancellationReasonByReason", reflect.TypeOf((*MockStore)(nil).GetCancellationReasonByReason), ctx, reason)
}

// GetCategory mocks base method.
func (m *MockStore) GetCategory(ctx context.Context, id int32) (repository.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", ctx, id)
	ret0, _ := ret[0].(repository.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockStoreMockRecorder) GetCategory(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockStore)(nil).GetCategory), ctx, id)
}

// GetOptionsForProducts mocks base method.
func (m *MockStore) GetOptionsForProducts(ctx context.Context, dollar_1 []uuid.UUID) ([]repository.ProductOption, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptionsForProducts", ctx, dollar_1)
	ret0, _ := ret[0].([]repository.ProductOption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOptionsForProducts indicates an expected call of GetOptionsForProducts.
func (mr *MockStoreMockRecorder) GetOptionsForProducts(ctx, dollar_1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptionsForProducts", reflect.TypeOf((*MockStore)(nil).GetOptionsForProducts), ctx, dollar_1)
}

// GetOrderByGatewayRef mocks base method.
func (m *MockStore) GetOrderByGatewayRef(ctx context.Context, paymentGatewayReference *string) (repository.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByGatewayRef", ctx, paymentGatewayReference)
	ret0, _ := ret[0].(repository.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByGatewayRef indicates an expected call of GetOrderByGatewayRef.
func (mr *MockStoreMockRecorder) GetOrderByGatewayRef(ctx, paymentGatewayReference any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByGatewayRef", reflect.TypeOf((*MockStore)(nil).GetOrderByGatewayRef), ctx, paymentGatewayReference)
}

// GetOrderForUpdate mocks base method.
func (m *MockStore) GetOrderForUpdate(ctx context.Context, id uuid.UUID) (repository.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderForUpdate", ctx, id)
	ret0, _ := ret[0].(repository.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderForUpdate indicates an expected call of GetOrderForUpdate.
func (mr *MockStoreMockRecorder) GetOrderForUpdate(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderForUpdate", reflect.TypeOf((*MockStore)(nil).GetOrderForUpdate), ctx, id)
}

// GetOrderItem mocks base method.
func (m *MockStore) GetOrderItem(ctx context.Context, arg repository.GetOrderItemParams) (repository.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderItem", ctx, arg)
	ret0, _ := ret[0].(repository.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderItem indicates an expected call of GetOrderItem.
func (mr *MockStoreMockRecorder) GetOrderItem(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderItem", reflect.TypeOf((*MockStore)(nil).GetOrderItem), ctx, arg)
}

// GetOrderItemsByOrderID mocks base method.
func (m *MockStore) GetOrderItemsByOrderID(ctx context.Context, orderID uuid.UUID) ([]repository.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderItemsByOrderID", ctx, orderID)
	ret0, _ := ret[0].([]repository.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderItemsByOrderID indicates an expected call of GetOrderItemsByOrderID.
func (mr *MockStoreMockRecorder) GetOrderItemsByOrderID(ctx, orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderItemsByOrderID", reflect.TypeOf((*MockStore)(nil).GetOrderItemsByOrderID), ctx, orderID)
}

// GetOrderWithDetails mocks base method.
func (m *MockStore) GetOrderWithDetails(ctx context.Context, id uuid.UUID) (repository.GetOrderWithDetailsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderWithDetails", ctx, id)
	ret0, _ := ret[0].(repository.GetOrderWithDetailsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderWithDetails indicates an expected call of GetOrderWithDetails.
func (mr *MockStoreMockRecorder) GetOrderWithDetails(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderWithDetails", reflect.TypeOf((*MockStore)(nil).GetOrderWithDetails), ctx, id)
}

// GetPaymentMethodByName mocks base method.
func (m *MockStore) GetPaymentMethodByName(ctx context.Context, name string) (repository.PaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentMethodByName", ctx, name)
	ret0, _ := ret[0].(repository.PaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentMethodByName indicates an expected call of GetPaymentMethodByName.
func (mr *MockStoreMockRecorder) GetPaymentMethodByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentMethodByName", reflect.TypeOf((*MockStore)(nil).GetPaymentMethodByName), ctx, name)
}

// GetProductByID mocks base method.
func (m *MockStore) GetProductByID(ctx context.Context, id uuid.UUID) (repository.GetProductByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", ctx, id)
	ret0, _ := ret[0].(repository.GetProductByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockStoreMockRecorder) GetProductByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockStore)(nil).GetProductByID), ctx, id)
}

// GetProductOption mocks base method.
func (m *MockStore) GetProductOption(ctx context.Context, arg repository.GetProductOptionParams) (repository.ProductOption, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductOption", ctx, arg)
	ret0, _ := ret[0].(repository.ProductOption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductOption indicates an expected call of GetProductOption.
func (mr *MockStoreMockRecorder) GetProductOption(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductOption", reflect.TypeOf((*MockStore)(nil).GetProductOption), ctx, arg)
}

// GetProductOptionByID mocks base method.
func (m *MockStore) GetProductOptionByID(ctx context.Context, id uuid.UUID) (repository.GetProductOptionByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductOptionByID", ctx, id)
	ret0, _ := ret[0].(repository.GetProductOptionByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductOptionByID indicates an expected call of GetProductOptionByID.
func (mr *MockStoreMockRecorder) GetProductOptionByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductOptionByID", reflect.TypeOf((*MockStore)(nil).GetProductOptionByID), ctx, id)
}

// GetProductWithOptions mocks base method.
func (m *MockStore) GetProductWithOptions(ctx context.Context, id uuid.UUID) (repository.GetProductWithOptionsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductWithOptions", ctx, id)
	ret0, _ := ret[0].(repository.GetProductWithOptionsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductWithOptions indicates an expected call of GetProductWithOptions.
func (mr *MockStoreMockRecorder) GetProductWithOptions(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductWithOptions", reflect.TypeOf((*MockStore)(nil).GetProductWithOptions), ctx, id)
}

// GetProductsByIDs mocks base method.
func (m *MockStore) GetProductsByIDs(ctx context.Context, dollar_1 []uuid.UUID) ([]repository.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByIDs", ctx, dollar_1)
	ret0, _ := ret[0].([]repository.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByIDs indicates an expected call of GetProductsByIDs.
func (mr *MockStoreMockRecorder) GetProductsByIDs(ctx, dollar_1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByIDs", reflect.TypeOf((*MockStore)(nil).GetProductsByIDs), ctx, dollar_1)
}

// GetPromotionByID mocks base method.
func (m *MockStore) GetPromotionByID(ctx context.Context, id uuid.UUID) (repository.Promotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromotionByID", ctx, id)
	ret0, _ := ret[0].(repository.Promotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPromotionByID indicates an expected call of GetPromotionByID.
func (mr *MockStoreMockRecorder) GetPromotionByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromotionByID", reflect.TypeOf((*MockStore)(nil).GetPromotionByID), ctx, id)
}

// GetPromotionRules mocks base method.
func (m *MockStore) GetPromotionRules(ctx context.Context, promotionID uuid.UUID) ([]repository.PromotionRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromotionRules", ctx, promotionID)
	ret0, _ := ret[0].([]repository.PromotionRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPromotionRules indicates an expected call of GetPromotionRules.
func (mr *MockStoreMockRecorder) GetPromotionRules(ctx, promotionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromotionRules", reflect.TypeOf((*MockStore)(nil).GetPromotionRules), ctx, promotionID)
}

// GetPromotionTargets mocks base method.
func (m *MockStore) GetPromotionTargets(ctx context.Context, promotionID uuid.UUID) ([]repository.PromotionTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromotionTargets", ctx, promotionID)
	ret0, _ := ret[0].([]repository.PromotionTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPromotionTargets indicates an expected call of GetPromotionTargets.
func (mr *MockStoreMockRecorder) GetPromotionTargets(ctx, promotionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromotionTargets", reflect.TypeOf((*MockStore)(nil).GetPromotionTargets), ctx, promotionID)
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(ctx context.Context, email string) (repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockStore) GetUserByID(ctx context.Context, id uuid.UUID) (repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockStoreMockRecorder) GetUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockStore)(nil).GetUserByID), ctx, id)
}

// GetUserByUsername mocks base method.
func (m *MockStore) GetUserByUsername(ctx context.Context, username string) (repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockStoreMockRecorder) GetUserByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockStore)(nil).GetUserByUsername), ctx, username)
}

// ListCancellationReasons mocks base method.
func (m *MockStore) ListCancellationReasons(ctx context.Context) ([]repository.CancellationReason, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCancellationReasons", ctx)
	ret0, _ := ret[0].([]repository.CancellationReason)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCancellationReasons indicates an expected call of ListCancellationReasons.
func (mr *MockStoreMockRecorder) ListCancellationReasons(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCancellationReasons", reflect.TypeOf((*MockStore)(nil).ListCancellationReasons), ctx)
}

// ListCategories mocks base method.
func (m *MockStore) ListCategories(ctx context.Context, arg repository.ListCategoriesParams) ([]repository.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategories", ctx, arg)
	ret0, _ := ret[0].([]repository.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCategories indicates an expected call of ListCategories.
func (mr *MockStoreMockRecorder) ListCategories(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategories", reflect.TypeOf((*MockStore)(nil).ListCategories), ctx, arg)
}

// ListCategoriesWithProducts mocks base method.
func (m *MockStore) ListCategoriesWithProducts(ctx context.Context, arg repository.ListCategoriesWithProductsParams) ([]repository.ListCategoriesWithProductsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategoriesWithProducts", ctx, arg)
	ret0, _ := ret[0].([]repository.ListCategoriesWithProductsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCategoriesWithProducts indicates an expected call of ListCategoriesWithProducts.
func (mr *MockStoreMockRecorder) ListCategoriesWithProducts(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategoriesWithProducts", reflect.TypeOf((*MockStore)(nil).ListCategoriesWithProducts), ctx, arg)
}

// ListOptionsForProduct mocks base method.
func (m *MockStore) ListOptionsForProduct(ctx context.Context, productID uuid.UUID) ([]repository.ProductOption, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOptionsForProduct", ctx, productID)
	ret0, _ := ret[0].([]repository.ProductOption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOptionsForProduct indicates an expected call of ListOptionsForProduct.
func (mr *MockStoreMockRecorder) ListOptionsForProduct(ctx, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOptionsForProduct", reflect.TypeOf((*MockStore)(nil).ListOptionsForProduct), ctx, productID)
}

// ListOrders mocks base method.
func (m *MockStore) ListOrders(ctx context.Context, arg repository.ListOrdersParams) ([]repository.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrders", ctx, arg)
	ret0, _ := ret[0].([]repository.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrders indicates an expected call of ListOrders.
func (mr *MockStoreMockRecorder) ListOrders(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrders", reflect.TypeOf((*MockStore)(nil).ListOrders), ctx, arg)
}

// ListPaymentMethods mocks base method.
func (m *MockStore) ListPaymentMethods(ctx context.Context) ([]repository.PaymentMethod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPaymentMethods", ctx)
	ret0, _ := ret[0].([]repository.PaymentMethod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPaymentMethods indicates an expected call of ListPaymentMethods.
func (mr *MockStoreMockRecorder) ListPaymentMethods(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPaymentMethods", reflect.TypeOf((*MockStore)(nil).ListPaymentMethods), ctx)
}

// ListProducts mocks base method.
func (m *MockStore) ListProducts(ctx context.Context, arg repository.ListProductsParams) ([]repository.ListProductsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProducts", ctx, arg)
	ret0, _ := ret[0].([]repository.ListProductsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProducts indicates an expected call of ListProducts.
func (mr *MockStoreMockRecorder) ListProducts(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockStore)(nil).ListProducts), ctx, arg)
}

// ListUsers mocks base method.
func (m *MockStore) ListUsers(ctx context.Context, arg repository.ListUsersParams) ([]repository.ListUsersRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, arg)
	ret0, _ := ret[0].([]repository.ListUsersRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStoreMockRecorder) ListUsers(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStore)(nil).ListUsers), ctx, arg)
}

// SoftDeleteProduct mocks base method.
func (m *MockStore) SoftDeleteProduct(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDeleteProduct", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftDeleteProduct indicates an expected call of SoftDeleteProduct.
func (mr *MockStoreMockRecorder) SoftDeleteProduct(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDeleteProduct", reflect.TypeOf((*MockStore)(nil).SoftDeleteProduct), ctx, id)
}

// SoftDeleteProductOption mocks base method.
func (m *MockStore) SoftDeleteProductOption(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDeleteProductOption", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftDeleteProductOption indicates an expected call of SoftDeleteProductOption.
func (mr *MockStoreMockRecorder) SoftDeleteProductOption(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDeleteProductOption", reflect.TypeOf((*MockStore)(nil).SoftDeleteProductOption), ctx, id)
}

// ToggleUserActiveStatus mocks base method.
func (m *MockStore) ToggleUserActiveStatus(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleUserActiveStatus", ctx, id)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToggleUserActiveStatus indicates an expected call of ToggleUserActiveStatus.
func (mr *MockStoreMockRecorder) ToggleUserActiveStatus(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleUserActiveStatus", reflect.TypeOf((*MockStore)(nil).ToggleUserActiveStatus), ctx, id)
}

// UpdateCategory mocks base method.
func (m *MockStore) UpdateCategory(ctx context.Context, arg repository.UpdateCategoryParams) (repository.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", ctx, arg)
	ret0, _ := ret[0].(repository.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockStoreMockRecorder) UpdateCategory(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockStore)(nil).UpdateCategory), ctx, arg)
}

// UpdateOrderItemQuantity mocks base method.
func (m *MockStore) UpdateOrderItemQuantity(ctx context.Context, arg repository.UpdateOrderItemQuantityParams) (repository.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderItemQuantity", ctx, arg)
	ret0, _ := ret[0].(repository.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderItemQuantity indicates an expected call of UpdateOrderItemQuantity.
func (mr *MockStoreMockRecorder) UpdateOrderItemQuantity(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderItemQuantity", reflect.TypeOf((*MockStore)(nil).UpdateOrderItemQuantity), ctx, arg)
}

// UpdateOrderManualPayment mocks base method.
func (m *MockStore) UpdateOrderManualPayment(ctx context.Context, arg repository.UpdateOrderManualPaymentParams) (repository.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderManualPayment", ctx, arg)
	ret0, _ := ret[0].(repository.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderManualPayment indicates an expected call of UpdateOrderManualPayment.
func (mr *MockStoreMockRecorder) UpdateOrderManualPayment(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderManualPayment", reflect.TypeOf((*MockStore)(nil).UpdateOrderManualPayment), ctx, arg)
}

// UpdateOrderPaymentInfo mocks base method.
func (m *MockStore) UpdateOrderPaymentInfo(ctx context.Context, arg repository.UpdateOrderPaymentInfoParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderPaymentInfo", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderPaymentInfo indicates an expected call of UpdateOrderPaymentInfo.
func (mr *MockStoreMockRecorder) UpdateOrderPaymentInfo(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderPaymentInfo", reflect.TypeOf((*MockStore)(nil).UpdateOrderPaymentInfo), ctx, arg)
}

// UpdateOrderStatus mocks base method.
func (m *MockStore) UpdateOrderStatus(ctx context.Context, arg repository.UpdateOrderStatusParams) (repository.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, arg)
	ret0, _ := ret[0].(repository.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockStoreMockRecorder) UpdateOrderStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockStore)(nil).UpdateOrderStatus), ctx, arg)
}

// UpdateOrderStatusByGatewayRef mocks base method.
func (m *MockStore) UpdateOrderStatusByGatewayRef(ctx context.Context, arg repository.UpdateOrderStatusByGatewayRefParams) (repository.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatusByGatewayRef", ctx, arg)
	ret0, _ := ret[0].(repository.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderStatusByGatewayRef indicates an expected call of UpdateOrderStatusByGatewayRef.
func (mr *MockStoreMockRecorder) UpdateOrderStatusByGatewayRef(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatusByGatewayRef", reflect.TypeOf((*MockStore)(nil).UpdateOrderStatusByGatewayRef), ctx, arg)
}

// UpdateOrderTotals mocks base method.
func (m *MockStore) UpdateOrderTotals(ctx context.Context, arg repository.UpdateOrderTotalsParams) (repository.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderTotals", ctx, arg)
	ret0, _ := ret[0].(repository.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderTotals indicates an expected call of UpdateOrderTotals.
func (mr *MockStoreMockRecorder) UpdateOrderTotals(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderTotals", reflect.TypeOf((*MockStore)(nil).UpdateOrderTotals), ctx, arg)
}

// UpdateProduct mocks base method.
func (m *MockStore) UpdateProduct(ctx context.Context, arg repository.UpdateProductParams) (repository.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", ctx, arg)
	ret0, _ := ret[0].(repository.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockStoreMockRecorder) UpdateProduct(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockStore)(nil).UpdateProduct), ctx, arg)
}

// UpdateProductOption mocks base method.
func (m *MockStore) UpdateProductOption(ctx context.Context, arg repository.UpdateProductOptionParams) (repository.ProductOption, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductOption", ctx, arg)
	ret0, _ := ret[0].(repository.ProductOption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductOption indicates an expected call of UpdateProductOption.
func (mr *MockStoreMockRecorder) UpdateProductOption(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductOption", reflect.TypeOf((*MockStore)(nil).UpdateProductOption), ctx, arg)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(ctx context.Context, arg repository.UpdateUserParams) (repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, arg)
	ret0, _ := ret[0].(repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), ctx, arg)
}

// UpdateUserPassword mocks base method.
func (m *MockStore) UpdateUserPassword(ctx context.Context, arg repository.UpdateUserPasswordParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockStoreMockRecorder) UpdateUserPassword(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockStore)(nil).UpdateUserPassword), ctx, arg)
}

// UpdateUserRole mocks base method.
func (m *MockStore) UpdateUserRole(ctx context.Context, arg repository.UpdateUserRoleParams) (repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRole", ctx, arg)
	ret0, _ := ret[0].(repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserRole indicates an expected call of UpdateUserRole.
func (mr *MockStoreMockRecorder) UpdateUserRole(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRole", reflect.TypeOf((*MockStore)(nil).UpdateUserRole), ctx, arg)
}
